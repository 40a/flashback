package flashback

import (
	"time"

	"gopkg.in/mgo.v2/bson"
)

// OpType is the name of mongo op type
type OpType string

// Document represents the json-like infromation of an op
type Document map[string]interface{}

// Contains a list of mongo op types
const (
	Insert        OpType = "insert"
	Update        OpType = "update"
	Remove        OpType = "remove"
	Query         OpType = "query"
	Command       OpType = "command"
	Count         OpType = "command.count"
	FindAndModify OpType = "command.findandmodify"
)

// AllOpTypes specifies all supported op types
var AllOpTypes = []OpType{
	Insert,
	Update,
	Remove,
	Query,
	Count,
	FindAndModify,
}

// Op represents an op generated by the record utility
// It must (currently) be massaged a little before handing off to the executor
type Op struct {
	Ns         string    `bson:"ns"`
	Timestamp  time.Time `bson:"ts"`
	Type       OpType    `bson:"op"`
	NToSkip    int64     `bson:"ntoskip"`
	NToReturn  int64     `bson:"ntoreturn"`
	QueryDoc   bson.D    `bson:"query"`
	CommandDoc bson.D    `bson:"command"`
	InsertDoc  bson.D    `bson:"o"`
	UpdateDoc  bson.D    `bson:"updateobj"`
	Database   string
	Collection string
}

// GetElem is a helper to fetch a specific key from bson.D
// The second return value indicates whether or not the key exists
func GetElem(doc bson.D, key string) (interface{}, bool) {
	for _, elem := range doc {
		if elem.Name == key {
			return elem.Value, true
		}
	}

	return nil, false
}
